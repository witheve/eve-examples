# New New York Voting Registration

## What is this?

This example demonstrates how to capture input from forms and create and explore records from that. It should also provide a look at some of the particular complications and pitfalls in dealing with forms. In the future it'll most likely be useful to address a more complicated version of forms, but for now this is a good starting point to develop an intuition of the concepts. If anything seems oversimplified or susceptible to edge cases and user error, it's most likely from the effort to avoid bugs and overly complicated layouts.

## Page Layout

### Containers

This one's pretty simple; I want a nav bar at the top to let me manually go to the different pages, and an app window where those pages are rendered.

```
commit @browser
  [#div class:"nav-bar"]
  [#div class:"app-window"]
```

### Pages
For every page I want, I make a record with an attribute of `target` to specify which each page is called.

```
commit
  [#page target:"Start"]
  [#page target:"Register"]
  [#page target:"Summary"]
```

### Nav Bar Buttons
By abstracting this step out, I can define all the pages I want as in the block before, and then here find those pages and create a button on the nav bar for each of them.

```
search @session @browser
  nav-bar = [#div class:"nav-bar"]
  [#page target]

bind @browser
  nav-bar <- [children: [#button target text:target]]
```

This partner block works with the nav buttons by simply setting the app window to whichever nav button is clicked.

```
search @session @browser @event
  [#click element: [#button target]]
  window = [#app-window]

commit
  window.target := target
```

### Starting Page
This commits a record called #`app-window` whose attribute `target` specifies which page gets rendered. In this case, when the app starts up, I want the landing view to be the Start page.

```
commit
  [#app-window target:"Start"]

```
## Start Page

The starting page isn't very complicated - it contains a thank you message for the civically engaged Earthicans, the flag of Earth, a button to start a new registration for another voter, and a subtle sponsorship message.

```
search @session @browser
  [#app-window target:"Start"]
  window = [#div class:"app-window"]

bind @browser
  window.class += "home-screen"
  window <- [children:
    [#div class:"thank-you" text:"Thank you for registering to vote!"]
    [#img class:"old-freebie" src:"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Futurama_flag_of_Earth.svg/720px-Futurama_flag_of_Earth.svg.png"]
    [#button target:"Register" class:"begin-btn" text:"Begin a new registration"]
    [#div class:"sponsor" text:"This election sponsored with love by MomCorp"]
  ]
```

## Voter Registration Page

Holy text wall Batman. So it turns out the voter registration page is a little verbose, far more than most of what I write in Eve. This one was tricky because even with a pretty minimal number of questions, the layout quickly became complicated, not to mention capturing and organizing all the data to be committed. As many reusable parts as possible were used on this page, with #`qualify-test` designating yes/no questions that determine your eligibility to vote, #`field` designating standard text input questions, and `radio` input buttons designating the "pick one" questions. The first two get both their content and shape specified in subsequent blocks, and the last has its general shape defined here with subsequent blocks to populate those lists. It's tough to homogenize something like this, especially with all the one-offs. Some of the forms need a character limit, like phone number or birthday. The radio buttons for the political parties needed a special button at the end to choose if you have no political affiliation, and radio buttons in general differ from the other #`input` blocks in terms of their namespace.

```
search @session @browser
  [#app-window target:"Register"]
  window = [#div class:"app-window"]
  [#party party-name priority]
  [#gender gender-name order]

bind @browser
  window.class += "voter-registration"
  window <- [children: 
  [#form name: "Voter Registration" sections: 
  
    [#section sort: 1 name: "Qualifications" fields: 
      [#field #required sort: 1 type: "radio" label: "Are you a citizen?" field: "citizenship" options:   
        [label: "Yes"]
        [label: "No"]]
      [#field #required sort: 2 type: "radio" label: "Have you been convicted of a felony?" field: "felony" options: 
        [label: "Yes"]
        [label: "No"]]]
  
  [#section sort: 2 name: "Personal Information" fields:
    [#field #required sort: 1 type: "input" label: "First Name" field: "first-name"]
    [#field sort: 2 type: "input" label: "Middle Name" field: "middle-name"]
    [#field #required sort: 3 type: "input" label: "Last Name" field: "last-name"]
    [#field #required sort: 4 type: "input" label: "Birthday" field: "birthday" placeholder:"MM-DD-YYYY"]
    [#field #required sort: 5 type: "radio" label: "Gender" field: "gender" options: 
      [label: gender-name]]
    [#field sort: 6 type: "input" label:"Phone Number" field: "phone" placeholder:"XXX-XXX-XXXX"]
    [#field #required sort: 7 type: "input" label:"Last 4 Digits of SSN" field: "ssn" placeholder:"XXXX"]
  ]
  
  [#section sort: 3 name: "Address" fields: 
    [#field #required sort: 1 type: "input" label: "Address Line 1" field: "address1"]
    [#field sort: 2 type: "input" label: "Address Line 2" field: "address2"]
    [#field #required sort: 3 type: "input" label: "City" field: "city"]
    [#field #required sort: 4 type: "input" label: "State" field: "state"]
    [#field #required sort: 5 type: "input" label: "Zip" field: "zip"]
  ]
  
  [#section sort: 4 name: "Political Affiliation" fields: 
    [#field #required sort: 1 type: "radio" label: "Of which party are you a member?" field: "party" options:
    [label: party-name]
  ]
  
  ]
          
]]
```

This listens for a new submission on the registration form, and creates a new #voter record with the submitted information.

```
search @browser @session
  window = [#app-window]
  [#form name: "Voter Registration" submission: s]
  
  middle-name  = if s.middle-name then s.middle-name else ""
  phone  = if sphone then s.phone else ""
  address2 = if s.address2 then s.address2 else ""
         
  s.citizenship = "Yes"
  s.felony = "No"

commit
  window.target := "Submission"
  window.voter := voter
  voter = [#voter 
    first-name: s.first-name 
    middle-name 
    last-name: s.last-name
    birthday: s.birthday
    ssn: s.ssn
    phone
    gender: s.gender 
    party: s.party
   address: [
    address1: s.address1 
    address2 
    city: s.city
    state: s.state
    zip: s.zip]]
```

After submitting a registrations, the user is shown a summary registration card

```
search @session @browser
  [#app-window target:"Submission" voter]
  window = [#div class:"app-window"]
  
bind @browser
  window.children += [#voter-card voter]
```


Gender options

Technically this question susses out both one's gender and organic life versus robot status, and the end result is the need for a list of genders rather than a binary option. Instead of adding these manually in the voter registration page layout, I've made a list here, open to any additional genders that need to be added. Any gender on this list will get added to the voter registration page, which gets sorted by the `order` attribute.

```
commit
  [#gender gender-name:"Male" order:1]
  [#gender gender-name:"Female" order:2]
  [#gender gender-name:"Manbot" order:3]
  [#gender gender-name:"Fembot" order:4]
```

### Political Party Options

While the Tastycrats and Fingerlicans are the primary parties, there are many third parties to choose from, and they all get listed here. Again, this makes it easy to add or remove political parties without having to mess around with the voter registration page.

```
commit
  [#party party-name:"Tastycrat Party" priority:1]
  [#party party-name:"Fingerlican Party" priority:2]
  [#party party-name:"One Cell, One Vote" priority:3]
  [#party party-name:"Green Party" priority:4]
  [#party party-name:"Brain Slug Party" priority:5]
  [#party party-name:"Dudes for the Legalization of Hemp" priority:6]
  [#party party-name:"Bull Space Moose Party" priority:7]
  [#party party-name:"National Ray-Gun Association" priority:8]
  [#party party-name:"People for the Ethical Treatment of Humans" priority:9]
  [#party party-name:"Voter Apathy Party" priority:10]
  [#party party-name:"Rainbow Whigs" priority:11]
  [#party party-name:"Antisocialists" priority:12]
  [#party party-name:"Reform Party" priority:13]
  [#party party-name:"No Party" priority:14]
```

### Committing a New Voter Record





Summary Page

This page gives an administrator an overview of all the Earthicans who have registered to vote, and drawing the contents is actually pretty easy. All we need is a #`voter-card` for each #`voter` record. The layout for what the #`voter-card` looks like gets handled in the next block, and the brunt of the work for this section is actually the styling.

```eve
search @session @browser
  [#app-window target:"Summary"]
  window = [#div class:"app-window"]
  voter = [#voter]  
  
bind @browser
  window.children += [#voter-card voter]
```

### Voter Cards

Each voter gets a #`voter-card` in the browser, and this block inject that with all of its content. It's worth noting again how verbose this section is, since each question on the registration form requires its own line in the search block. Originally I had intended to capture first name, middle name, and last name separately, as well as the street number, city, and zip code for address, but all of those different fields added up quickly and I was staring down the barrel of a 20-line search block. There are more complicated methods to deal with complex situations like that, and we'll have another example to show off functionality (perhaps an expanded version of this app), but for now, long-winded specificity is the cleanest way to achieve the goals of this example.

```
search @session @browser
  voter-card = [#voter-card voter]
  voter = [#voter first-name last-name birthday gender ssn party address]
  phone = if voter.phone then "Phone: {{voter.phone}}" else ""
  address2 = if address.address2 then " {{address.address2}} " else " "
  middle-name = if voter.middle-name then " {{voter.middle-name}} " else " "

bind @browser
  voter-card <- [#div class:"voter-card" children:
    [#div class:"voter-name" text: "{{first-name}}{{middle-name}}{{last-name}}"]
    [#div class:"birth-info" children:
      [#div class:"voter-address" text: "{{address.address1}}{{address2}}{{address.city}} {{address.state}} {{address.zip}}"]
      [#div class:"voter-birth" text:"Born: {{birthday}}"]
      [#div class:"voter-sex" text:"Gender: {{gender}}"]
      [#div class:"voter-phone" text:phone]
      [#div class:"voter-ssn" text:"SSN: XXX-XX-{{ssn}}"]]
    [#div class:"voter-party" text:"Affiliation: {{party}}"]]
  
```

## Appendix

### Sample Data

Here's a few registered voters to help populate the Summary page.

```eve
commit
  [#voter
   first-name: "Philip"
   middle-name: "J."
   last-name: "Fry"
   birthday: "08-14-1974"
   gender: "male"
   ssn: "0810"
   party: "Voter Apathy Party"
   address: [address1: "620 W 42nd St" address2: "Apt 00100100" city: "New New York" state: "NY" zip: "10036"]]
  
  [#voter
    first-name: "Hubert"
    middle-name: "J."
    last-name: "Farnsworth"
    birthday: "04-09-2841"
    gender: "male"
    phone: "04-09-2841"
    ssn: "2458"
    party: "National Ray-Gun Association"
    address: [address1: "650 W 57th S." city: "New New York" state: "NY" zip: "10036"]]

  [#voter
    first-name: "Turanga" 
    last-name: "Leela"
    birthday: "07-29-2975"
    gender: "Female"
    phone: "212-307-7760"
    ssn: "3001"
    party: "No party"
    address: [address1: "715 9th Ave" address2: "Apt 1I" city: "New New York" state: "NY" zip: "10036"]]

  [#voter 
    first-name: "Bender"
    middle-name: "Bending"
    last-name: "Rodriguez"
    birthday: "01-02-2996"
    gender: "Manbot"
    party: "No party"
    ssn: "BU22"
    address: [address1: "620 W 42nd St" address2: "Apt 00100100" city: "New New York" state: "NY" zip: "10036"]]

  [#voter
    first-name: "John"
    middle-name: "A."
    last-name: "Zoidberg"
    birthday: "05-05-2914"
    gender: "Male"
    ssn: "DXC7"
    party: "People for the Ethical Treatment of Humans"
    address: [address1: "The dumpster behind 650 W 57th St" city: "New New York" state: "NY" zip: "10036"]]
    
  [#voter
    first-name: "Hermes" 
    last-name: "Conrad"
    birthday: "07-15-2959"
    gender: "Male"
    ssn: "6789"
    party: "Brain Slug Party"
    address: [address1: "105 Duane St" address2: "Apt 3007" city: "New New York" state: "NY" zip: "10007"]]

  [#voter 
    first-name: "Amy"
    last-name: "Wong"
    birthday: "05-04-2978"
    gender: "Female"
    phone: "212-995-8833"
    ssn: "5523"
    party: "Dudes for the Legalization of Hemp"
    address: [address1: "10 West St." city: "New New York" state: "NY" zip: "10007"]]
```

### A Custom Form Element

Forms have a title and one or more sections. Each section has an optional name, and contains one or more fields. Each field additionally has the input type of that field (input, radio button, drop down list, etc.).

A form starts as a `#form` record.

```eve
search @browser
  form = [#form]
  
bind @browser
  form += #div
  form.sort := 0
  form.class := "form"
  form.submission := []
```

Display the form name

```eve
search @browser
  form = [#form]
  
bind @browser
  form.children += [#div children:
    [#h1 class: "form-name" sort: 0 text: form.name]
    [#div #form-message form sort: 1 class: "form-message"]]

```

Display each section. To properly display sections, we need to add them to the children of the form.

```eve
search @browser
  form = [#form sections]
    
bind @browser
  form.children += [#div form section: sections class: "form-section" sort: sections.sort]
  sections.form := form
```

If the section has a name, display it

```eve
search @browser
  section-display = [#div section]
  
bind @browser
  section-display.children += [#h2 class: "section-name" text: section.name, sort: 0]
```

Display the fields in each section. As we did with sections, to display fields we need to move them over to the children of the section display.

```eve
search @browser
  section-display = [#div section]
  field = section.fields
  
bind @browser
  section-display.children += 
    [#div #field field sort: field.sort form: section.form sort: 1]
```

Display a submit button at the end of the form

```eve
search @browser
  form = [#form]
  
bind @browser
  form.children += [#button #submit form sort: 100 text: "Submit"]
```

Forms can have an optional reset button, which clears the fields in the form

```eve
search @browser
  form = [#form options: [reset: true]]
  
bind @browser
  form.children += [#button #reset form sort: 101 text: "Reset"]
```

Clicking the reset button clears each field in the form

```eve
search @event @browser
  [#click element: [#reset]]
  field-container = [#div field form]
    
commit @browser
  field-container.children.value := none
```

Handle form validation

Add the #required tag to required input fields

```eve
search @browser
  field = [#field #required]
  input = [#input not(#required) field type: "input"]
  
commit @browser
  input += #required
```

Add required tag to radio fields

```
search @browser
  field = [#field #required]
  input = [#radio not(#required) field]
  
commit @browser
  input += #required  
```

If an input is #required, but has no value, then post a message stating to fill in all required fields.

```
search @browser @event
  [#click element: [#button #submit form]]
  required-fields = [#input #required type: "input" field]
  not(required-fields.value)
  field-label = [#h3 field]
  
commit @browser
  field-label.class += "required-field"
```

Do the same for radio buttons

```eve
search @browser @event
  [#click element: [#button #submit form]]
  required-fields = [#radio #required field]
  not(required-fields.value)
  field-label = [#h3 field]
  
commit @browser
  field-label.class += "required-field"
```

Display a message at the top if any fields are required but missing

```
search @browser
  [#h3 class: "required-field"]
  form-message = [#form-message form]
  
bind @browser
  form-message.children += [#div class: "error-message" text: "Please fill out all required fields"]
```

Custom Input Types

Render radio buttons

```
search @browser
  field-display = [#div #field field form]
  field.type = "radio"

bind @browser
  field-display.children += [#div #radio field children: 
    [#h3 field text: field.label]
    [#div option: field.options children: 
      [#div class: "radio-label" text: field.options.label]
      [#input class: "radio-button" field form type: "radio" name: field.field value: field.options.label]]
  ]
```

Bind the clicked value to the radio div

```
search @browser
  [#input type: "radio" checked: true field value]
  radio-div = [#div #radio field]
  
bind @browser
  radio-div.value := value
```

Submit radio options

```
search @browser @event @session
  click = [#click element: [#submit form]]
  form = [#form submission]
  radio = [#input form type: "radio" checked: true name: key value]
  
bind @browser
  lookup[record: submission, attribute: key, value]
```

Render input fields

```
search @browser
  field-display = [#div #field field form]
  field.type = "input"
  placeholder = if field.placeholder then field.placeholder
                else ""

bind @browser
  field-display.children += [#div children: 
    [#h3 field text: field.label]
    [#input class: "text-input" type: "input" form field name: field.field placeholder]
  ]
```

Submit input value

```
search @browser @event @session
  click = [#click element: [#submit form]]
  form = [#form submission]
  input = [#input type: "input" form field name: key value]

bind @browser
  lookup[record: submission, attribute: key, value]
```

Render password fields

```eve
search @browser
  password = [#password]
  
bind @browser
  password += #input
  password.type := "password"
  password.class := "password"
```

Render custom button styles

```eve
search @browser
  button = [#button]
  
bind @browser
  button.class += "button"
```

### Styles

This app needs a good amount of CSS to style the layout of the registration form and the voter cards.

```css
{for a good time, leave this here}
```

```css
.radio-label {
 float: left;
 font-size: 13px; 
 width: 300px;
}

.radio-button {
  width: 100px;
}

.text-input {
 width: 350px; 
 border-radius: 5px;
 padding: 5px;
}

.error-message {
 background-color: 	#FA8072; 
 padding: 10px;
 color: white;
 font-size: 16px;
}

.required-field {
  color: red;
}
```

```css
@font-face {
  font-family: "futurama";
  src: url("assets/fr-bold.ttf") format("truetype");
}

.nav-bar {
  order: 1;
  display: flex;
  flex-direction: row;
  margin-bottom: 10px;
  min-height: 44px;
}

.nav-bar button {
  padding: 10px;
  margin-right: 15px;
  border: 1px solid #555;
  border-radius: 5px;
  background: none;
  font-size: 14px;
}

.app-window.home-screen {
  background: radial-gradient(circle at bottom,#5ef5fc,#0b527a,#012535);
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: center;
  height: 100%;
  min-height: 1000px;
  order: 2;
}

.thank-you {
  font-family: "futurama";
  text-align: center;
  margin: 100px 0px;
  font-size: 48px;
  color: white;
}

.begin-btn {
  width: auto;
  flex: 0 0 50px;
  padding: 0px 20px;
  margin-top: 5vh;
  font-size: 16px;
  background: white;
  border: 1px solid #555;
  border-radius: 6px;
  text-transform: uppercase;
}


.sponsor {
  background: url(http://i.imgur.com/sWkxxNU.png) no-repeat;
  background-size: 60px;
  background-position: bottom center;
  width: auto;
  height: 100px;
  color: white;
  position: absolute;
  bottom: 30px;
  text-transform: uppercase;
  font-size: 24px;
  text-align: center;
}

.app-window {
  background: white;
  order: 2;
  display: flex;
  flex-direction: column;
  overflow: scroll;
  height: 100%;
}

.voter-registration > div {
  display: flex;
  border-top: 1px solid #0b527a;
  align-items: center;
  padding: 15px 0px;
  flex: 0 0 auto;
}

.voter-registration h1 {
  font-size: 80px;
  width: 150px;
  margin-right: 50px;
  padding-left: 20px;
  color: #0b527a;
}

.voter-registration input {
  margin-left: 8px;
}

.name-field {
  width: 300px;
  display: inline;
}

.address-field {
  width: 500px;
  display: inline;
}

.radio-field {
  margin: 6px 0px;
}

.gender-field {
  display: flex;
  align-items: center;
}

.gender-field div {
  margin-right: 15px;
}

.voter-card {
  flex: 0 0 auto;
  display: flex;
  flex-direction: column;
  margin-bottom: 10px;
  border: 1px solid #555;
  border-radius: 6px;
  padding: 10px;
}

.submit-btn {
  width: auto;
  height: 60px;
  margin-top: 20px;
  padding: 0px 60px;
  font-size: 16px;
  color: white;
  background: #0b527a;
  border: 1px solid #555;
  border-radius: 6px;
  text-transform: uppercase;
  align-self: center;
  flex: 0 0 auto;
}

.voter-name {
  font-size: 18px;
  margin-bottom: 10px;
  font-weight: 600;
}

.voter-address {
  font-size: 18px;
  margin-bottom: 10px;
}

.birth-info {
  display: flex;
}

.birth-info div {
  padding-right: 50px;
}

@media (max-width:2275px) {
  
.nav-bar {
  min-height: 25px;
}

.nav-bar button {
  padding: 0px 10px;
  margin-right: 10px;
  font-size: 10px;
}

.app-window.home-screen {
  min-height: 550px;
}
  
.thank-you {
  text-align: center;
  margin: 50px 0px;
  font-size: 26px;
}

.old-freebie {
  width: 80%;
}
  
.begin-btn {
  flex: 0 0 40px;
  padding: 0px 20px;
  margin-top: 50px;
  font-size: 14px;
}
  
.sponsor {
  background-size: 40px;
  width: auto;
  height: 70px;
  bottom: 20px;
  font-size: 14px;
}

.app-window {
  font-size: 12px;
} 
  
.voter-registration > div {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 0px 10px 10px 10px;
  flex: 0 0 auto;
  min-width: 192px;
}
  
.voter-registration > div > div{
  width: 100%;
}   

.voter-registration h1 {
  font-size: 30px;
  flex: 0 0 20px;
  width: auto;
  margin-right: 0px;
  padding-left: 0px;
}


  
.radio-field input {
  margin-left: 6px;  
}
  
.name-field {
  width: 100%;
  display: flex;
}
  
.birth-field {
  width: 100%;
  display: flex;
}
  
.phone-field {
  width: 100%;
  display: flex;
}  

.voter-registration .address-field {
  width: 100%;
  display: inline;
  margin-left: 0px;
}
  
.voter-registration .ssn-field {
  margin-left: 0px;
  width: 100%;
  display: flex;
}

.radio-field {
  margin: 5px 0px;
}

.submit-btn {
  width: auto;
  height: 40px;
  margin: 25px 0px;
  padding: 0px 40px;
  font-size: 14px;
}
  
.political-party .radio-field {
  display: flex;
  flex-direction: column;
  margin-bottom: 10px;
}
  
.political-party input {
  margin-left: 0px;
}

.voter-name {
  font-size: 16px;
}

.voter-address {
  font-size: 16px;
}

.birth-info {
  flex-direction: column;
}

.birth-info div {
  padding-right: 0px;
}  
  
}
```
